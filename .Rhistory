geom_tile(color = "white", lwd = 0.5) +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green")) +
coord_fixed()
p <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green"))
ggplotly(p)
p <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = acceptance.rate, color = "white")) +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green"))
ggplotly(p)
p <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = acceptance.rate),  color = "white") +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green"))
ggplotly(p)
p <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green"))
ggplotly(p)
p <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
ggplotly(p)
p <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days", labels = "%d %M")
ggplotly(p)
p <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days") %>%
ggplotly()
ggHeatmap <- function(.data, x, y, z, scale) {
p <- .data %>%
filter(week(x) >= week(Sys.Date()) - 8) %>%
ggplot(aes(all_of(x), all_of(y), fill = all_of(z))) +
geom_tile(color = "white", lwd = 0.5) +
scale_fill_manual(breaks = levels(all_of(z)),
values = scale) +
scale_x_date(breaks = "7 days")
return(ggplotly(p))
}
weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
ggHeatmap("entry.date", "hccss", "cat", c("red", "orange", "yellow", "green"))
ggHeatmap <- function(.data, x, y, z, scale) {
p <- .data %>%
filter(week(all_of(x)) >= week(Sys.Date()) - 8) %>%
ggplot(aes(all_of(x), all_of(y), fill = all_of(z))) +
geom_tile(color = "white", lwd = 0.5) +
scale_fill_manual(breaks = levels(all_of(z)),
values = scale) +
scale_x_date(breaks = "7 days")
return(ggplotly(p))
}
weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
ggHeatmap("entry.date", "hccss", "cat", c("red", "orange", "yellow", "green"))
weekly.hmap.raw <- read.xlsx("data-raw/Heat Map.xlsx",
detectDates = TRUE, sheet = "Heat_Map") %>%
tibble() %>%
mutate(acceptance.rate = round((accepted/(accepted + refused))*100, 2))
colnames(weekly.hmap.raw) <- c("hccss", "accepted", "refused", "time.gender", "no.staff", "incomplete",
"counters.prov", "hours.rej", "hours.offered", "entry.date", "acceptance.rate")
acceptance.rate <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2),
cat = cut(weekly.hmap.raw$acceptance.rate, breaks = c(0, 70, 90, 94, 100))) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
acceptance.rate <- weekly.hmap.raw %>%
mutate(acceptance.rate = round((accepted/(refused + accepted)) * 100, 2)) %>%
mutate(cat = cut(weekly.hmap.raw$acceptance.rate, breaks = c(0, 70, 90, 94, 100))) %>%
select(entry.date, hccss, acceptance.rate, cat) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
weekly.hmap.raw <- read.xlsx("data-raw/Heat Map.xlsx",
detectDates = TRUE, sheet = "Heat_Map") %>%
tibble() %>%
mutate(acceptance.rate = round((accepted/(accepted + refused))*100, 2),
time.spec = round((time.gender/refused) * 100, 2),
no.staff = round((no.staff/refused) * 100, 2),
counter.rate = round((counters.prov/refused) * 100, 2))
View(weekly.hmap.raw)
weekly.hmap.raw <- read.xlsx("data-raw/Heat Map.xlsx",
detectDates = TRUE, sheet = "Heat_Map") %>%
tibble() %>%
mutate(acceptance.rate = round((accepted/(accepted + refused))*100, 2),
time.spec = round((time.gender/refused) * 100, 2),
no.staff = round((no.staff/refused) * 100, 2),
counter.rate = round((counters.prov/refused) * 100, 2))
weekly.hmap.raw %>%
mutate(cat = cut(weekly.hmap.raw$acceptance.rate, breaks = c(0, 70, 90, 94, 100)))
weekly.hmap.raw %>%
mutate(cat = cut(acceptance.rate, breaks = c(0, 70, 90, 94, 100)))
# Setting ranges
acceptance.groups <- c(0, 70, 90, 94, 100)
incomplete.groups <- c(0, 1, Inf)
counter.groups <- c(0, 90, 99, 100)
hours.countered.groups <- c(0, 25, 50, 100)
weekly.hmap.raw %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups))
weekly.hmap.raw %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(weekly.hmap.raw$cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
weekly.hmap.raw %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
weekly.hmap.raw %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
acceptance.rate <- weekly.hmap.raw %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
ggplotly(acceptance.rate)
weekly.time.spec <- weekly.hmap.raw %>%
createHeatMap("entry.date", "hccss", "no.staff", risk.scale,
"Week", "Refusals: Time Specific (%)")
weekly.time.spec
source("C:/Users/justi/OneDrive/Desktop/Analytics/01_heatmap.R", echo=TRUE)
source("C:/Users/justi/OneDrive/Desktop/Analytics/01_heatmap.R", echo=TRUE)
shiny::runApp()
runApp()
write_csv(monthly.hmap, "Montlyh.csv")
monthly.hmap <- read.xlsx("data-raw/Monthly_Heat_Map.xlsx", detectDates = TRUE, sheet = "Sheet1") %>%
tibble() %>%
mutate(counter.offer.rate = round(counter.offer.rate * 100, 2),
hours.countered = round(hours.countered * 100, 2),
assess.to.date = round(assess.to.date * 100, 2),
acceptance.rate = round((accepted/total)*100, 2),
falls.per.1000 = round((client.falls/monthly.clients)*1000, 2),
missed.care.rate = round((missed/mc.denom)*100, 2),
staff.per.1000 = round((staff.rs/workers.in.area)*1000, 2),
other.per.1000 = round((rs.events/monthly.clients)*1000, 2))
monthly.hmap %>%
filter(hccss == "CE" | hccss == "CW" | hccss == "CENT" | hccss == "TC") %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(week(entry.date) >= week(Sys.Date()) - 8) %>%
ggplot(aes(entry.date, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
View(monthly.hmap)
monthly.hmap %>%
filter(hccss == "CE" | hccss == "CW" | hccss == "CENT" | hccss == "TC") %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(month(month) >= month(Sys.Date()) - 8) %>%
ggplot(aes(month, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green")) +
scale_x_date(breaks = "7 days")
monthly.hmap %>%
filter(hccss == "CE" | hccss == "CW" | hccss == "CENT" | hccss == "TC") %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(month(month) >= month(Sys.Date()) - 8) %>%
ggplot(aes(month, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green"))
monthly.acceptance.rate <- monthly.hmap %>%
filter(hccss == "CE" | hccss == "CW" | hccss == "CENT" | hccss == "TC") %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(month(month) >= month(Sys.Date()) - 8) %>%
ggplot(aes(month, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green"))
ggplotly(monthly.acceptance.rate)
monthly.acceptance.rate <- monthly.hmap %>%
filter(hccss == "CE" | hccss == "CW" | hccss == "CENT" | hccss == "TC") %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(month(month) >= month(Sys.Date()) - 8) %>%
ggplot(aes(month, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5, size = 2) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white") +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green"))
monthly.acceptance.rate <- monthly.hmap %>%
filter(hccss == "CE" | hccss == "CW" | hccss == "CENT" | hccss == "TC") %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(month(month) >= month(Sys.Date()) - 8) %>%
ggplot(aes(month, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white", size = 2) +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green"))
ggplotly(monthly.acceptance.rate)
monthly.acceptance.rate <- monthly.hmap %>%
filter(hccss == "CE" | hccss == "CW" | hccss == "CENT" | hccss == "TC") %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(month(month) >= month(Sys.Date()) - 8) %>%
ggplot(aes(month, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white", size = 4) +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green"))
ggplotly(monthly.acceptance.rate)
monthly.acceptance.rate <- monthly.hmap %>%
filter(hccss == "CE" | hccss == "CW" | hccss == "CENT" | hccss == "TC") %>%
mutate(cat = cut(acceptance.rate, breaks = acceptance.groups)) %>%
filter(month(month) >= month(Sys.Date()) - 8) %>%
ggplot(aes(month, hccss, fill = cat)) +
geom_tile(color = "white", lwd = 0.5) +
geom_text(aes(label = paste0(acceptance.rate, "%")),  color = "white", size = 3) +
scale_fill_manual(breaks = levels(cat),
values = c("red", "orange", "yellow", "green"))
ggplotly(monthly.acceptance.rate)
source("C:/Users/justi/OneDrive/Desktop/Analytics/01_heatmap.R", echo=TRUE)
runApp()
runApp()
runApp()
risk.db <- read.xlsx("data-raw/risk_and_safety.xlsx", detectDates = TRUE)  %>%
tibble() %>%
mutate(creation.date = parse_date_time(creation.date, "%m/%d/%y %H:%M:%S")) %>%
filter(event.type != "Not a Risk Event")
View(risk.db)
# Fix department listings
for.correction <- str_detect(risk.db$department, "Home Services") %>%
which()
risk.db$department[c(for.correction)] <- "Home Services"
for.correction <- str_detect(risk.db$department, "Holocaust") %>%
which()
risk.db$department[c(for.correction)] <- "Holocaust"
for.correction <- str_detect(risk.db$department, "Social Work") %>%
which()
risk.db$department[c(for.correction)] <- "Social Work"
for.correction <- str_detect(risk.db$department, "Adult Day Program") %>%
which()
risk.db$department[c(for.correction)] <- "Adult Day Program"
for.correction <- str_detect(risk.db$department, "Intake") %>%
which()
risk.db$department[c(for.correction)] <- "Intake"
# Fix Funder listings
risk.db$primary.funder <- str_to_title(risk.db$primary.funder)
risk.db$creation.date <- as.Date(risk.db$creation.date) %>%
floor_date("month")
floor_date(risk.db$creation.date, 'month')
# Count of Events  --------------------------------------------------------
# Overall
risk.count <- risk.db %>%
group_by(creation.date, event.type) %>%
summarise(count = n())
risk.count.wider <- risk.count %>%
pivot_wider(names_from = event.type, values_from = count)
colnames(risk.count.wider) <- c("creation.date", "complaint", "prev.risk", "risk.event",
"risk.identified", "staff.risk", "client.hospital", "adv.event")
risk.event.count <- risk.db %>%
group_by(event.type, creation.date) %>%
summarise(count = n()) %>%
createBarPlot("creation.date", "count", TRUE, "event.type", "Date",
"Event Type")
# Risk events by department (and date)
risk.by.dep <- risk.db %>%
group_by(department, creation.date) %>%
summarise(count = n()) %>%
createBarPlot("creation.date", "count", TRUE, "department", "Date",
"Number of Events")
risk.by.funder <- risk.db %>%
mutate(primary.funder = str_to_title(primary.funder)) %>%
group_by(primary.funder, creation.date) %>%
summarise(count = n()) %>%
createBarPlot("creation.date", "count", TRUE, "primary.funder", "Date",
"Number of Events")
event.type.plot <- risk.db %>%
group_by(event.type) %>%
summarise(count = n()) %>%
plot_ly(x = ~event.type, y = ~count, type = "bar")
client.events.plot <- risk.db %>%
group_by(creation.date, risk.type.client) %>%
summarise(count = n()) %>%
createBarPlot("creation.date", "count", TRUE, "risk.type.client",
"Date", "Client Risk Events")
staff.events.plot <- risk.db %>%
group_by(risk.type.staff, creation.date) %>%
summarise(count = n()) %>%
createBarPlot("creation.date", "count", TRUE, "risk.type.staff",
"Date", "Staff Risk Events")
falls.by.funder <- risk.db %>%
filter(risk.type.client == "Client Fall") %>%
group_by(creation.date, primary.funder) %>%
summarise(count = n()) %>%
createLinePlot("creation.date", "count", TRUE, "primary.funder",
"Date", "Total Number of Falls")
unwitnessed.falls <- risk.db %>%
filter(fall.witness == "Unwitnessed") %>%
group_by(creation.date, primary.funder) %>%
summarise(count = n()) %>%
createBarPlot("creation.date", "count", TRUE, "primary.funder",
"Date", "Number of Unwitnessed Falls")
rejection.rate <- read_csv("data-raw/rejection_rate.csv")
offers <- read.xlsx("data-raw/Offer_Tracking.xlsx",
sheet = "Offers",
detectDates = TRUE) %>%
tibble() %>%
mutate(acceptance_rate = round(acceptance_rate * 100, 2),
week = cut.Date(date, breaks = "1 week", labels = FALSE))
runApp()
shiny::runApp()
runApp()
runApp()
source("C:/Users/justi/OneDrive/Desktop/Analytics/00_setup.R", echo=TRUE)
library("plotly")
library("tidyverse")
library("lubridate")
library("openxlsx")
library("ggthemes")
library("ggplot2")
library("scales")
# Data --------------------------------------------------------------------
safa.scorecard <- read.xlsx("data-raw/SAFA Scorecard.xlsx",
detectDates = TRUE,
sheet = "Target & Availability") %>%
tibble() %>%
mutate(Availability = Availability * 100,
Target = Target * 100) %>%
rename(availability = Availability,
targetpercent = Target)
View(safa.scorecard)
psw.utilization <- read.xlsx("data-raw/SAFA Scorecard.xlsx",
detectDates = TRUE,
sheet = "Utilization") %>%
tibble() %>%
mutate(utilization = utilization * 100)
psw.utilization <- read.xlsx("data-raw/SAFA Scorecard.xlsx",
detectDates = TRUE,
sheet = "Utilization") %>%
tibble() %>%
mutate(percent = percent * 100)
View(psw.utilization)
twelve.weeks <- read.xlsx("data-raw/12 Weeks.xlsx",
detectDates = TRUE) %>%
tibble()
View(twelve.weeks)
twelve.weeks <- read.xlsx("data-raw/12 Weeks.xlsx",
detectDates = TRUE) %>%
tibble()
colnames(twelve.weeks) <- c("psw", "psw.id", "coordinator", "coordinator.id", "gender", "worker.type",
"group", "resigned", "one", "two", "three", "four", "five", "six", "seven",
"eight", "nine", "ten", "eleven", "twelve", "complete")
twelve.weeks[9:20] <- apply(twelve.weeks[9:20], 2, toPercent)
average.twelve <- colMeans(twelve.weeks[9:20], na.rm = TRUE)
names(average.twelve) <- NULL
twelve.weeks.split <- split(twelve.weeks, twelve.weeks$group)
grouped.means <- lapply(twelve.weeks.split, function(x){
colMeans(x[, c("one", "two", "three",
"four", "five", "six",
"seven", "eight", "nine",
"ten", "eleven", "twelve")],
na.rm = TRUE)
})
new.names <- format(as.Date(names(grouped.means)), "%m-%Y")
names(grouped.means) <- new.names
grouped.means <- lapply(grouped.means, namesToNull)
output <- tibble(group = "Average",
weeks = c(1:12),
value = average.twelve)
remainder <- length(grouped.means)
complete <- 1
while (complete < length(grouped.means) + 1) {
new.dat <- reshapeTwelve(grouped.means[complete])
output <- rbind(output, new.dat)
complete <- complete + 1
remainder <- remainder - 1
print(remainder)
}
View(output)
twelve.weeks <- read.xlsx("data-raw/12 Weeks.xlsx",
detectDates = TRUE,
sheet = "12 Weeks") %>%
tibble()
colnames(twelve.weeks) <- c("psw", "psw.id", "coordinator", "coordinator.id", "gender", "worker.type",
"group", "resigned", "one", "two", "three", "four", "five", "six", "seven",
"eight", "nine", "ten", "eleven", "twelve", "complete")
twelve.weeks[9:20] <- apply(twelve.weeks[9:20], 2, toPercent)
average.twelve <- colMeans(twelve.weeks[9:20], na.rm = TRUE)
names(average.twelve) <- NULL
twelve.weeks.split <- split(twelve.weeks, twelve.weeks$group)
grouped.means <- lapply(twelve.weeks.split, function(x){
colMeans(x[, c("one", "two", "three",
"four", "five", "six",
"seven", "eight", "nine",
"ten", "eleven", "twelve")],
na.rm = TRUE)
})
new.names <- format(as.Date(names(grouped.means)), "%m-%Y")
names(grouped.means) <- new.names
grouped.means <- lapply(grouped.means, namesToNull)
output <- tibble(group = "Average",
weeks = c(1:12),
value = average.twelve)
remainder <- length(grouped.means)
complete <- 1
while (complete < length(grouped.means) + 1) {
new.dat <- reshapeTwelve(grouped.means[complete])
output <- rbind(output, new.dat)
complete <- complete + 1
remainder <- remainder - 1
print(remainder)
}
# Under-utilized  ------------------------------------------------------------
psw.utilization$week.num <- week(psw.utilization$week)
comp.week <- week(Sys.Date()) - 2
under.utilized <- psw.utilization %>%
filter(week.num >= comp.week & utilization < 50) %>%
select(-week.num)
under.utilized <- psw.utilization %>%
filter(week.num >= comp.week & percent < 50) %>%
select(-week.num)
View(under.utilized)
comp.week <- week(Sys.Date()) - 3
under.utilized <- psw.utilization %>%
filter(week.num >= comp.week & percent < 50) %>%
select(-week.num)
comp.week <- week(Sys.Date()) - 4
under.utilized <- psw.utilization %>%
filter(week.num >= comp.week & percent < 50) %>%
select(-week.num)
utilized <- psw.utilization %>%
filter(week.num >= comp.week & percent >= 50) %>%
select(-week.num)
View(utilized)
runApp()
runApp()
runApp('Analytics')
runApp()
runApp()
runApp()
runApp()
